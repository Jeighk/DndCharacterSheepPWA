@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@page "/CharacterSheet/{Id:int}"
@inject ICharacterSheet CharacterSheetService
@inject NavigationManager NavigationManager


<h3>Character Sheet</h3>
<button @onclick="() => { Edit_Click();}">Edit</button>
<button @onclick="() => { Save_Click();}">Save</button>
<button @onclick="() => { Load_Click();}">Load</button>
<div>Name</div>
<input readonly=@IsClean @bind-value="@Character.Name"/>
<div>Level</div>
<input  readonly=@IsClean @bind-value="@Character.Level"/>       
<div>MaxHitPoints</div>
<input readonly=@IsClean @bind-value="@Character.MaxHitPoints"/>
<div>Strength</div>
<input readonly=@IsClean @bind-value="@Character.Strength"/>    
<div>Dexterity</div>
<input    readonly=@IsClean @bind-value="@Character.Dexterity"/>   
<div>Constituion</div>
<input  readonly=@IsClean @bind-value="@Character.Constituion"/> 
<div>Intelligence</div>
<input readonly=@IsClean @bind-value="@Character.Intelligence"/>
<div>Wisdom</div>
<input       readonly=@IsClean @bind-value="@Character.Wisdom"/>      
<div>Charisma</div>            
<input     readonly=@IsClean @bind-value="@Character.Charisma"/>    
<div>Alignment</div>           
<input    readonly=@IsClean @bind-value="@Character.Alignment"/>   
<div>Class</div>               
<input        readonly=@IsClean @bind-value="@Character.Class"/>       
<div>Race</div>                
<input         readonly=@IsClean @bind-value="@Character.Race"/>       
<div>Background</div>          
<input   readonly=@IsClean @bind-value="@Character.Background"/>  
<div>Gold</div>                
<input         readonly=@IsClean @bind-value="@Character.Gold"/>       
<div>Speed</div>               
<input        readonly=@IsClean @bind-value="@Character.Speed"/>      

@code {
    [Parameter]
    public int Id { get; set; }
    public bool IsNew { get; set; }
    public bool IsClean { get; set; }
    private CharacterModel? _character { get; set; }
    public CharacterModel Character { get; set; }
    public List<CharacterModel> Characters { get; set; }
    protected async override Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            IsNew = true;
            IsClean = false;
        }
        else
        {
            IsClean = true;
        }
        Character = new CharacterModel();
        await CharacterSheetService.GetCharacterList();
    }
    public void Edit_Click()
    {
        IsClean = false;
    }
    //TODO Cover for duplicate names
    public void Save_Click()
    {
        if (!IsClean)
        {
            if (IsNew)
            {
                CharacterSheetService.PostCharacter(Character);
            }
            IsClean = true;
        }
    }
    public void Load_Click()
    {
        Character = CharacterSheetService.Characters.FirstOrDefault(x => x.Id == Id);
        IsClean = true;
    }
}
